// I wish I could just return a color from a function.
// Too complicated for LESS, though, I guess.
.border-gray(@gray) {
  border: 1px solid rgb(@gray, @gray, @gray);
}
.background-gray(@gray) {
  background-color: rgb(@gray, @gray, @gray);
}
.color-gray(@gray) {
  color: rgb(@gray, @gray, @gray);
}


body {
  margin: 0;
  font-family: "Lucida Grande", Arial, sans-serif;
}
h1, h2, h3, h4, h5, h6 {
  margin: 0.5ex 0;
}
p {
  margin: 1ex 0;
}
button {
  // margin: 10px 10px 0 0;
}
label[disabled] {
  .color-gray(50%);
  // margin: 2px 0;
  // display: block;
  // vertical-align: middle;
}
textarea, input {
  vertical-align: middle;
  margin: 0;
}
input[type="radio"], input[type="checkbox"] {
  margin: 1px .25ex;
}
fieldset {
  margin: 0 10px 10px 0;
  border: 1px solid #CCC;
}
.code {
  font: 9pt monospace;
}

.help {
  cursor: pointer;
  .color-gray(60%);

  .summary {
    display: block;
    margin: 1ex 0;
  }
  .content {
    display: none;
  }

  &.expanded {
    .color-gray(5%);
    .summary {
      display: none;
    }
    .content {
      display: block;
    }
  }
}
table.striped {
  th, td {
  }
  thead {
    th, td {
      // .background-gray(75%);
    }
  }
  tbody {
    tr:nth-child(odd) {
      .background-gray(99%);
    }
    tr:nth-child(even) {
      // .background-gray(98%);
    }
  }
  tfoot {
    th, td {
      // border-top: 1px solid rgb(50%, 50%, 50%);
      .background-gray(90%);
    }
  }
}
.ng-invalid {
  box-shadow: 0 0 10px rgb(200, 0, 0);
}

.json {
  .code;
  min-height: 50px;
  min-width: 400px
}

section {
  margin: 10px 0;

  // &.fill {
  //   border-width: 1px 0;
  //   overflow: auto;
  // }
  // &.box {
  //   display: inline-block;
  //   // inline-block doesn't allow margin overlapping, so remove the top-bottom margins
  //   // but also add left-right margins
  //   margin: 0 10px;
  // }
}

button.anchor {
  // vertical-align: top;
  background: none;
  border: none;
  text-decoration: underline;
  cursor: pointer;
  font-size: 100%;
  padding: 0;
}

body.admin {
  .background-gray(98%);
  font-size: 80%; // why is the default so big!?
  overflow-y: scroll;

  nav {
    position: fixed;
    width: 100%;
    .background-gray(94%);
    box-sizing: border-box;

    padding: 0 4px;
    border-bottom: 1px solid #BBB;

    & > span, & > a, & > button, & > img {
      vertical-align: middle;
    }

    a, button.anchor {
      display: inline-block;
      margin: 3px;
      border-radius: 3px;
      padding: 2px 6px;
      border: 1px solid #CCC;
      .background-gray(94%);
      &.current {
        .border-gray(75%);
        .background-gray(98%);
      }
      &:hover {
        .border-gray(60%);
        .background-gray(100%);
      }
    }
    button {
      font-size: 100%;
    }
    aside {
      float: right;
      padding-right: 8px
    }
  }

  // .status span {
  //   font-weight: bold;
  //   margin: 10px 10px 0 0;
  //   &.Submitted { color: #CCC; }
  //   &.Approved { color: darkgreen; }
  //   &.Rejected { color: darkred; }
  // }
}

main {
  // most immediate children of main should be padded
  padding: 5px 10px;
  .fill {
    // negative margins squeeze back out of that padding
    margin-left: -10px;
    margin-right: -10px;
    padding: 10px;
    background-color: white;
    border: 1px solid #EEE;
    border-width: 1px 0;
    width: 100%;
    & > table {
      width: 100%;
      // margin-left: -10px;
      // margin-right: -10px;
      // thead {
      //   td, th {
      //     padding: 4px 0;
      //   }
      // }
      // tr {
      //   td:first-child, th:first-child {
      //     padding-left: 10px;
      //   }
      //   td:last-child, th:last-child {
      //     padding-right: 10px;
      //   }
      // }
    }
  }
}

table {
  border-collapse: collapse;
  th {
    text-align: left;
  }
  td, th {
    vertical-align: top;
    padding: 0px 4px 1px 1px;
  }
  // &.hoverable tbody tr:hover {
  //   background-color: #DDD;
  // }
  // thead td, tbody td {
  //   border-bottom: 1px solid #DDD;
  // }
}
table.keyval {
  th {
    padding-top: 4px;
    border-bottom: 1px solid #999;
  }
  td:first-child {
    font-weight: bold;
  }
}

// .record.delete {
//   background-color: #DDD;
//   color: #555;
//   text-decoration: line-through;
// }

.hover-flow {
  word-wrap: break-word; // normal | break-word | inherit
  text-overflow: ellipsis;

  white-space: nowrap; // normal | pre |  | pre-wrap | pre-line | inherit
  overflow: hidden;
  &:hover {
    white-space: normal;
    overflow: visible;
  }
}

.login {
  width: 300px;
  margin: 50px auto;
  padding: 10px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.05);
}
input[type="checkbox"] + span {
  // bold spans coming after checkboxes
  display: inline-block;
  font-weight: bold;
  margin-left: .25em;
}
.vform, .hform {
  span {
    vertical-align: middle;
  }
  & > label {
    margin: 4px 0;
  }
}
.hform {
  label {
    span {
      &:first-child {
        display: inline-block;
        font-weight: bold;
        width: 75px;
      }
    }
  }
}
.vform {
  label {
    span {
      margin: 2px 4px;
      &:first-child {
        // only match spans that come first in a label so that radio btns with postfixed spans are not blocked and bolded
        display: block;
        font-weight: bold;
        margin: 2px 0;
      }
    }
  }
}

.truncate {
  display: block;
  max-width: 10em;
  overflow: hidden;
  text-overflow: ellipsis;
}

.array {
  .controls {
    text-align: right;
  }
  .add {
    margin: 0;
    padding: 0;
    background: none;
    border: none;
    cursor: pointer;
  }
  .add::before {
    content: "add ";
  }
  .remove {
    color: darkred;
    cursor: pointer;
  }
}

.preview {
  position: fixed;
  max-width: 50%;
  top: 10px;
  right: 10px;
  border: 1px solid #DDD;
  .content {
    padding: 10px;
    background-color: white;
  }
  .controls {
    padding: 10px;
    background-color: #EEE;
    cursor: pointer;
    span {
      float: right;
    }
    &:hover {
      background-color: #DDD;
    }
  }
}

.focus {
  box-shadow: 0 0 6px rgba(81, 203, 238, 1);
  // border: 1px solid rgba(81, 203, 238, 1);
}

.flag {
  position: absolute;
  background-color: black;
  border-radius: 3px;
  padding: 2px 6px;
  color: white;
  .triangle {
    position: absolute;
    border: 6px solid transparent;
  }
}
